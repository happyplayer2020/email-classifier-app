#!/usr/bin/env python3
"""
Google OAuth and Gmail API Setup Script for Email Classifier
"""

import os
import sys
import json
import webbrowser
from urllib.parse import urlparse

def print_header():
    """Print setup header"""
    print("üîß Google OAuth & Gmail API Setup")
    print("=" * 50)
    print("This script will help you set up Google OAuth for Gmail access.")
    print("You'll need to create a Google Cloud Project and enable the Gmail API.")
    print()

def create_env_file():
    """Create .env file with all required environment variables"""
    print("üìù Setting up environment variables...")
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    # Get OpenAI API key
    print("\nüîë OpenAI API Key:")
    print("Get your API key from: https://platform.openai.com/api-keys")
    openai_key = input("OpenAI API Key: ").strip()
    
    if not openai_key:
        print("‚ùå OpenAI API key is required!")
        return False
    
    # Get Google OAuth credentials
    print("\nüåê Google OAuth Setup:")
    print("1. Go to: https://console.cloud.google.com/")
    print("2. Create a new project or select existing one")
    print("3. Enable Gmail API: https://console.cloud.google.com/apis/library/gmail.googleapis.com")
    print("4. Create OAuth 2.0 credentials: https://console.cloud.google.com/apis/credentials")
    print("5. Set authorized redirect URI to: http://localhost:5000/oauth2callback")
    print()
    
    google_client_id = input("Google Client ID: ").strip()
    google_client_secret = input("Google Client Secret: ").strip()
    
    if not google_client_id or not google_client_secret:
        print("‚ùå Google OAuth credentials are required!")
        return False
    
    # Generate secret key
    import secrets
    secret_key = secrets.token_hex(32)
    
    # Create .env file
    env_content = f"""# Email Classifier Environment Variables
# Generated by setup_google.py

# OpenAI API Key
OPENAI_API_KEY={openai_key}

# Google OAuth Configuration
GOOGLE_CLIENT_ID={google_client_id}
GOOGLE_CLIENT_SECRET={google_client_secret}
GOOGLE_REDIRECT_URI=http://localhost:5000/oauth2callback

# Flask Configuration
SECRET_KEY={secret_key}
FLASK_ENV=development
FLASK_DEBUG=1
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def create_google_credentials_file():
    """Create Google credentials JSON file"""
    print("\nüìÑ Creating Google credentials file...")
    
    if os.path.exists('credentials.json'):
        print("‚ö†Ô∏è  credentials.json already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower()
        if overwrite != 'y':
            return True
    
    # Get credentials from user
    print("Please provide your Google OAuth credentials:")
    client_id = input("Client ID: ").strip()
    client_secret = input("Client Secret: ").strip()
    
    if not client_id or not client_secret:
        print("‚ùå Google credentials are required!")
        return False
    
    # Create credentials.json
    credentials_data = {
        "web": {
            "client_id": client_id,
            "client_secret": client_secret,
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "redirect_uris": ["http://localhost:5000/oauth2callback"]
        }
    }
    
    try:
        with open('credentials.json', 'w') as f:
            json.dump(credentials_data, f, indent=2)
        print("‚úÖ credentials.json created successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Error creating credentials.json: {e}")
        return False

def check_dependencies():
    """Check if all required packages are installed"""
    print("üîç Checking dependencies...")
    
    required_packages = [
        'flask',
        'flask-cors', 
        'openai',
        'python-dotenv',
        'requests',
        'google-auth',
        'google-auth-oauthlib',
        'google-auth-httplib2',
        'google-api-python-client',
        'flask-sqlalchemy',
        'flask-login',
        'flask-session',
        'werkzeug',
        'email-validator',
        'cryptography'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå Missing packages: {', '.join(missing_packages)}")
        print("Installing missing packages...")
        
        try:
            import subprocess
            subprocess.check_call([sys.executable, '-m', 'pip', 'install'] + missing_packages)
            print("‚úÖ All packages installed successfully!")
        except subprocess.CalledProcessError:
            print("‚ùå Failed to install packages. Please run: pip install -r requirements.txt")
            return False
    else:
        print("‚úÖ All dependencies are installed!")
    
    return True

def open_google_console():
    """Open Google Cloud Console in browser"""
    print("\nüåê Opening Google Cloud Console...")
    print("Please follow these steps:")
    print("1. Create a new project or select existing one")
    print("2. Enable Gmail API")
    print("3. Create OAuth 2.0 credentials")
    print("4. Set redirect URI to: http://localhost:5000/oauth2callback")
    print()
    
    open_console = input("Open Google Cloud Console in browser? (Y/n): ").lower()
    if open_console != 'n':
        webbrowser.open('https://console.cloud.google.com/')
        webbrowser.open('https://console.cloud.google.com/apis/library/gmail.googleapis.com')
        webbrowser.open('https://console.cloud.google.com/apis/credentials')

def print_next_steps():
    """Print next steps for the user"""
    print("\nüéâ Setup complete!")
    print("\nüìö Next steps:")
    print("1. Make sure your Google OAuth credentials are configured correctly")
    print("2. Run the application: python run.py")
    print("3. Open your browser to: http://localhost:5000")
    print("4. Click 'Sign in with Google' to test the integration")
    print("5. Grant Gmail access permissions when prompted")
    print("\nüîß Troubleshooting:")
    print("- If you get OAuth errors, check your redirect URI in Google Console")
    print("- Make sure Gmail API is enabled in your Google Cloud project")
    print("- Verify your client ID and secret are correct")
    print("- Check that your .env file contains all required variables")

def main():
    """Main setup function"""
    print_header()
    
    # Check dependencies
    if not check_dependencies():
        sys.exit(1)
    
    # Open Google Console
    open_google_console()
    
    # Create environment file
    if not create_env_file():
        sys.exit(1)
    
    # Create credentials file
    if not create_google_credentials_file():
        sys.exit(1)
    
    print_next_steps()

if __name__ == '__main__':
    main() 